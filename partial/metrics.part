[.topic.intro]
== Metrics CDI

====
Integrate a Third-party Library into the CDI Programming Model
====


[.topic.source]
== Dropwizard Metrics

NOTE: Open-source Java library providing monitoring primitives like `Counter`, `Gauge`, `Histogram`, `Meter`, `Timer`, ...

NOTE: Provides a `MetricRegistry` that articulates modules and reporters

NOTE: Defines annotations for AOP frameworks like Spring AOP, AspectJ, Guice (AOP Alliance) *and CDI*, e.g.:

[source, subs="verbatim,quotes"]
----
class TimedMethodBean {
    [highlight]#@Timed(name = "timer")#
    void timedMethod() {
        // Timer name => TimedMethodBean.timer
    }
}
----


[.topic.source]
== Bean Method Interceptors

TIP: Use *Java interceptors* for Metrics annotation AOP

[source, subs="verbatim,quotes"]
----
[highlight]#@Interceptor# [highlight]#@TimedBinding#
[highlight]#@Priority(Interceptor.Priority.LIBRARY_BEFORE)#
class TimedInterceptor {
    @Inject MetricRegistry registry;
    [highlight]#@AroundInvoke#
    Object timedMethod(InvocationContext context) throws Exception {
        String name = context.getMethod().getAnnotation(Timed.class).name();
        Timer timer = registry.timer(name);
        Timer.Context time = timer.time();
        try {
            return [highlight]#context.proceed()#;
        } finally {
            time.stop();
        }
    }
}
----


[.topic.source]
== Java Interceptor Bindings

TIP: Use *Java interceptor bindings* to associate the interceptor

[source, subs="verbatim,quotes"]
----
[highlight]#@InterceptorBinding#
@Target({ ElementType.TYPE, ElementType.METHOD })
@Retention(RetentionPolicy.RUNTIME)
@interface TimedBinding {
}
----

CAUTION: Forces to add the binding manually!

[source, subs="verbatim,quotes"]
----
class TimedMethodBean {
    @Timed
    [highlight]#@TimedBinding#
    void timedMethod() {
    }
}
----


[.topic.source]
== The `ProcessAnnotatedType<X>` Event

TIP: Add the interceptor binding programmatically

[source, subs="verbatim,quotes"]
----
public interface ProcessAnnotatedType<X> {
    public AnnotatedType<X> getAnnotatedType();
    public void setAnnotatedType(AnnotatedType<X> type);
    public void veto();
}
----


[.topic.source]
== `ProcessAnnotatedType` in Lifecycle
image::pat.png[height="95%", width="95%"]


[.topic.source]
== Add Interceptor Bindings Programmatically

[source, subs="verbatim,quotes"]
----
class MetricsExtension implements Extension {

  <X> void bindTimedMethodInterceptor(@Observes [highlight]#@WithAnnotations(Timed.class)#
    ProcessAnnotatedType<X> pat) { <1>
    Set<AnnotatedMethod<? super X>> decoratedMethods = new HashSet<>();
    for (AnnotatedMethod<? super X> method : pat.getAnnotatedType().getMethods())
      if (method.isAnnotationPresent(Timed.class))
          decoratedMethods.add(
            new AnnotatedMethodDecorator<>(method, [highlight]#new TimedBindingLiteral()#)); <2>

    pat.setAnnotatedType(
      new AnnotatedTypeDecorator<>(pat.getAnnotatedType(), decoratedMethods));
  }
}
----
<1> Observe types containing the `@Timed` annotation
<2> Add the interceptor binding to the annotated methods


[.topic.recap]
== Custom `Timer`?

[source, subs="verbatim,quotes"]
----
@Interceptor
@TimedBinding
@Priority(Interceptor.Priority.LIBRARY_BEFORE)
class TimedInterceptor {
    @Inject MetricRegistry registry;
    @AroundInvoke
    Object timedMethod(InvocationContext context) throws Exception {
        String name = context.getMethod().getAnnotation(Timed.class).name();
        [highlight]#Timer timer = registry.timer(name)#; <1>
        Timer.Context time = timer.time();
        try {
            return context.proceed();
        } finally {
            time.stop();
        }
    }
}
----
<1> Default `Timer` histogram is exponentially biased to the past 5 minutes of measurements


[.topic.source]
== The `ProcessBean<X>` Events

TIP: Use *producer fields / methods* to register custom metrics

[source, subs="verbatim,quotes"]
----
[highlight]#@Produces# Timer t = new Timer([highlight]#new SlidingTimeWindowReservoir(1L, TimeUnit.MINUTES)#);
----

[source]
.`ProcessProducerField<T, X>`
----
public interface ProcessProducerField<T, X> extends ProcessBean<X> {
    public AnnotatedField<T> getAnnotatedProducerField();
    public AnnotatedParameter<T> getAnnotatedDisposedParameter();
    // ProcessBean<X>
    public Annotated getAnnotated();
    public Bean<X> getBean();
}
----

NOTE: `ProcessManagedBean<X>` and `ProcessProducerMethod<T, X>` are fired for managed beans and producer methods respectively


[.topic.source]
== The `AfterDeploymentValidation` Event

[source, subs="verbatim,quotes"]
----
class MetricsExtension implements Extension {
  Map<Bean<?>, AnnotatedMember<?>> metrics = new HashMap<>();
  void producerFields(@Observes [highlight]#ProcessProducerField<? extends Metric, ?># ppf) {
    metrics.put(ppf.getBean(), ppf.getAnnotatedProducerField()); <1>
  }
  void producerMethods(@Observes [highlight]#ProcessProducerMethod<? extends Metric, ?># ppm) {
    metrics.put(ppm.getBean(), ppm.getAnnotatedProducerMethod()); <1>
  }
  void customMetrics(@Observes [highlight]#AfterDeploymentValidation# adv, BeanManager manager) {
    for (Map.Entry<Bean<?>, AnnotatedMember<?>> metric : metrics.entrySet())
      registry.register(metricName(member), manager.getReference(metric.getKey(), <2>
        metric.getValue().getBaseType(), manager.createCreationalContext(null)));
  }
}
----
<1> Collect the custom `Metric` producer fields and methods
<2> Instantiate and register the custom metrics into the Metrics registry


[.topic.source]
== Example: Composition of Metrics

[source, subs="verbatim,quotes"]
----
@Inject
private Meter [highlight]#hits#; <1>

@Timed(name = "[highlight]#calls#") <2>
public void cachedMethod() {
    if (hit) hits.mark();
}

@Produces @Metric(name = "[highlight]#cache-hits#") <3>
private Gauge<Double> cacheHitRatioGauge(Meter [highlight]#hits#, Timer [highlight]#calls#) {
    return () -> calls.getOneMinuteRate() == 0 ? Double.NaN :
                 hits.getOneMinuteRate() / calls.getOneMinuteRate();
}
----
<1> `Metric` _injection_ from the registry
<2> Method _instrumentation_ with interceptors
<3> Produce a custom `Metric` instance by composing others
